import { Logger } from '@nestjs/common';
import {
    PluginInterface,
    PluginMeta,
    PluginHook,
    PluginContext,
    Account,
    Order,
    Trade,
    Candle,
    OrderBook,
    InspectorRegulation,
} from '@barfinex/types';

/**
 * –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç PluginInterface —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å.
 */
export abstract class DetectorPluginService implements PluginInterface {
    protected readonly logger: Logger;

    abstract readonly name: string;
    abstract readonly meta: PluginMeta;

    /** –ü—É–±–ª–∏—á–Ω—ã–π API –ø–ª–∞–≥–∏–Ω–∞ (–∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–≤–æ–π) */
    abstract api: unknown;

    /** –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ (UI ‚Üí options) */
    options: Record<string, unknown> = {};

    constructor() {
        // üëá –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ–º –∏–º—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        this.logger = new Logger(this.constructor.name);
    }

    // ================= PluginInterface hooks =================

    async [PluginHook.onInit](_ctx: PluginContext): Promise<void> { }
    async [PluginHook.onStart](_ctx: PluginContext): Promise<void> { }
    async [PluginHook.onDispose](_ctx: PluginContext): Promise<void> { }

    async [PluginHook.onTrade](_ctx: PluginContext, _trade: Trade): Promise<void> { }
    async [PluginHook.onAfterTrade](_ctx: PluginContext, _trade: Trade): Promise<void> { }

    async [PluginHook.onAccountUpdate](_ctx: PluginContext, _account: Account): Promise<void> { }
    async [PluginHook.onAfterAccountUpdate](_ctx: PluginContext, _account: Account): Promise<void> { }

    async [PluginHook.onCandleUpdate](_ctx: PluginContext, _candle: Candle): Promise<void> { }
    async [PluginHook.onAfterCandleUpdate](_ctx: PluginContext, _candle: Candle): Promise<void> { }

    async [PluginHook.onCandleOpen](_ctx: PluginContext, _candle: Candle): Promise<void> { }
    async [PluginHook.onAfterCandleOpen](_ctx: PluginContext, _candle: Candle): Promise<void> { }

    async [PluginHook.onCandleClose](_ctx: PluginContext, _candle: Candle): Promise<void> { }
    async [PluginHook.onAfterCandleClose](_ctx: PluginContext, _candle: Candle): Promise<void> { }

    async [PluginHook.onOrderBookUpdate](_ctx: PluginContext, _orderBook: OrderBook): Promise<void> { }
    async [PluginHook.onAfterOrderBookUpdate](_ctx: PluginContext, _orderBook: OrderBook): Promise<void> { }

    async [PluginHook.onOrderOpen](_ctx: PluginContext, _order: Order): Promise<void> { }
    async [PluginHook.onAfterOrderOpen](_ctx: PluginContext, _order: Order): Promise<void> { }

    async [PluginHook.onOrderClose](_ctx: PluginContext, _order: Order): Promise<void> { }
    async [PluginHook.onAfterOrderClose](_ctx: PluginContext, _order: Order): Promise<void> { }

    async [PluginHook.onInspectorRegulation](_ctx: PluginContext, _reg: InspectorRegulation): Promise<void> { }
    async [PluginHook.onAfterInspectorRegulation](_ctx: PluginContext, _reg: InspectorRegulation): Promise<void> { }
}
